#include <cstdio>
#include <vector>
#include <algorithm>
 
using namespace std;
 
const int MAX = 120;
vector < int > graph[MAX];
bool visited[MAX];
int Left[MAX], Right[MAX];
 
void init()
{
	for(int i = 0; i < MAX; i++ ) {
		graph[ i ].clear();
		Left[ i ] = -1;
		Right[ i ] = -1;
	}
}
 
bool dfs(int u)
{
	if( visited[ u ] ) return false;
	visited[ u ] = true;
	int len = graph[u].size(),v;
	for(int i = 0; i < len; i++ ) {
		v = graph[u][i];
		if(Right[ v ] == -1) {
			Right[ v ] = u, Left [ u ] = v;
			return true;
		}
	}
	for(int i = 0; i < len; i++ ) {
		v = graph[ u ] [ i ];
		if(dfs( Right[ v ] ) ) {
			Right[ v ] = u, Left[ u ] = v;
			return true;
		}
	}
	return false;
}
 
int maxmatch()
{
	int maxflow = 0, done;
	do {
		done = true;
		for(int i = 0; i < MAX; i++ ) {
			visited[ i ] = false;
		}
		for(int i=0; i<MAX; i++) {
			if(Left[i]==-1 && dfs(i)) {
				done = false;
			}
		}
	} while( !done );
	for(int i=0; i < MAX; i++ ) {
		if( Left[ i ] != -1 ) {
			maxflow++;
		}
	}
	return maxflow;
}
 
int main() {
	int T;
	scanf("%d", &T);
	while( T-- ) {
		int N,u,v;
		scanf("%d", &N);
		init();
		for(int i = 0; i < N; i++ ) {
			scanf("%d%d", &u, &v);
			graph[u].push_back(v);
		}
		printf("%d\n", maxmatch());
	}
	return 0;
}
