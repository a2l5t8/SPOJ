#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
 
#define MAX_N 160
#define INF 1000000000
 
using namespace std;
 
int flow[MAX_N][MAX_N],cap[MAX_N][MAX_N];
 
void init()
{
	for(int i=0; i<MAX_N; i++) {
		for(int j=0; j<MAX_N; j++) {
			flow[i][j] = cap[i][j] = 0;
		}
	}
}
 
bool bfs(vector< int > graph[],int p[],int s,int t)
{
	bool visited[MAX_N];
	for(int i=0; i<MAX_N; i++) {
		visited[ i ] = false;
	}
	queue< int > q;
	q.push( s );
	visited[ s ] = true;
	p[ s ] = -1;
	while( !q.empty() ) {
		int u = q.front();
		q.pop();
		for(int i=0; i<graph[u].size(); i++) {
			int k = graph[u][i];
			if( !visited[ k ] && cap[u][k] - flow[u][k] > 0 ) {
				q.push( k );
				visited[ k ] = true;
				p[ k ] = u;
			}
		}
	}
	return visited[ t ];
}
 
int ff(vector< int > graph[],int s,int t)
{
	int p[MAX_N],maxflow = 0,cnt=1;
	while( bfs(graph,p,s,t) ) {
		int increment = INF;
			increment = min(increment,cap[p[i]][i] - flow[p[i]][i]);
		}
		for(int i=t; p[ i ] >= 0; i = p[ i ] ) {
			flow[i][p[i]] -= increment;
			flow[p[i]][i] += increment;
		}
		maxflow += increment;
	}
	return maxflow;
}
 
 
int main( void )
{
	int T;
	freopen("test.in","rt",stdin);
	scanf("%d",&T);
	while( T-- ) {
		int K,u,v;
		init();
		scanf("%d",&K);
		vector< int > graph[ MAX_N + 1 ];
		for(int i = 0; i < K; i++ ) {
			scanf("%d%d",&u,&v);
			graph[ 150 ].push_back( u );
			graph[ v ].push_back( 151 );
			graph[ u ].push_back( v );
			cap[ 150 ][ u ] = 1;
			cap[ u ][ v ] = 1;
			cap[ v ][ 151 ] = 1;
		}
		printf("%d\n", ff(graph, 150, 151 ) );
	}
	return 0;
}
