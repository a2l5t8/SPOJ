#include <cstdio>
#include <algorithm>
#include <cstring>

#define MAXL 27
#define MAXN 100000

using namespace std;

typedef long long ll;

struct node {
	int bits[ MAXL + 1 ][ 2 ];
	ll sum0, sum1, sum2;
	node() {
		memset( bits, 0, sizeof( bits ) );
		sum0 = sum1 = sum2 = 0;
	}
};

node BIT[ MAXN + 1 ];
int A[ MAXN + 1 ], N, Q;

void update( int pos, int val, int flag )
{
	int prevpos = pos, prevval = A[ pos ];
	A[ pos ] = val;
	while( prevpos <= N && flag ) {
		for( int i = 0; i < MAXL; ++i ) {
			int bit = prevval & ( 1 << i ) ? 1 : 0;
			if( BIT[ prevpos ].bits[ i ][ bit ] ) BIT[ prevpos ].bits[ i ][ bit ]--;
			BIT[ prevpos ].sum0 -= ( ll )BIT[ prevpos ].bits[ i ][ !bit ] * ( 1 << i );
			BIT[ prevpos ].sum1 -= ( ll )BIT[ prevpos ].bits[ i ][ !bit ] * ( 1 << i );
			if( bit == 1 ) {
				BIT[ prevpos ].sum1 -= ( ll )BIT[ prevpos ].bits[ i ][ 1 ] * ( 1 << i );
				BIT[ prevpos ].sum2 -= ( ll )BIT[ prevpos ].bits[ i ][ 1 ] * ( 1 << i );
			}
		}
		prevpos += ( prevpos & -prevpos );
	}
	while( pos <= N ) {
		for( int i = 0; i < MAXL; ++i ) {
			int bit = val & ( 1 << i ) ? 1 : 0;
			BIT[ pos ].sum0 += ( ll )BIT[ pos ].bits[ i ][ !bit ] * ( ll )( 1 << i );
			BIT[ pos ].sum1 += ( ll )BIT[ pos ].bits[ i ][ !bit ] * ( ll )( 1 << i );
			if( bit == 1 ) {
				BIT[ pos ].sum1 += ( ll )BIT[ pos ].bits[ i ][ 1 ] * ( ll )( 1 << i );
				BIT[ pos ].sum2 += ( ll )BIT[ pos ].bits[ i ][ 1 ] * ( ll )( 1 << i );
			}	
			BIT[ pos ].bits[ i ][ bit ]++;
		}
		pos += ( pos & -pos );
	}
}

ll query( int l, int r, int t )
{
	node qq;
	while( r > 0 ) {
		if( t == 0 ) qq.sum0 += BIT[ r ].sum0;
		if( t == 1 ) qq.sum1 += BIT[ r ].sum1;
		if( t == 2 ) qq.sum2 += BIT[ r ].sum2;
		for( int i = 0; i < MAXL; ++i ) {
			if( t == 0 ) {
				qq.sum0 += ( ll )BIT[ r ].bits[ i ][ 0 ] * ( ll )qq.bits[ i ][ 1 ] * ( ll )( 1 << i ) + 
					( ll )BIT[ r ].bits[ i ][ 1 ] * ( ll )qq.bits[ i ][ 0 ] * ( ll )( 1 << i );
			}
			if( t == 1 ) {
				qq.sum1 += ( ll )BIT[ r ].bits[ i ][ 0 ] * ( ll )qq.bits[ i ][ 1 ] * ( ll )( 1 << i ) + 
					( ll )BIT[ r ].bits[ i ][ 1 ] * ( ll )qq.bits[ i ][ 0 ] * ( ll )( 1 << i ) + 
					( ll )qq.bits[ i ][ 1 ] * ( ll )BIT[ r ].bits[ i ][ 1 ] * ( ll )( 1 << i );
			}
			if( t == 2 ) {
				qq.sum2 += ( ll )qq.bits[ i ][ 1 ] * ( ll )BIT[ r ].bits[ i ][ 1 ] * ( ll )( 1 << i );
			}
			qq.bits[ i ][ 0 ] += BIT[ r ].bits[ i ][ 0 ];
			qq.bits[ i ][ 1 ] += BIT[ r ].bits[ i ][ 1 ];
		}
		r -= ( r & -r );
	}
	l--;
	while( l > 0 ) {
		if( t == 0 ) qq.sum0 -= BIT[ l ].sum0;
		if( t == 1 ) qq.sum1 -= BIT[ l ].sum1;
		if( t == 2 ) qq.sum2 -= BIT[ l ].sum2;
		for( int i = 0; i < MAXL; ++i ) {
			qq.bits[ i ][ 0 ] -= BIT[ l ].bits[ i ][ 0 ];
			qq.bits[ i ][ 1 ] -= BIT[ l ].bits[ i ][ 1 ];
			if( t == 0 ) { 
				qq.sum0 -= ( ll )( ( ll )BIT[ l ].bits[ i ][ 0 ] * ( ll )qq.bits[ i ][ 1 ] + 
					( ll )BIT[ l ].bits[ i ][ 1 ] * ( ll )qq.bits[ i ][ 0 ] ) * ( ll )( 1 << i );
			}
			if( t == 1 ) {
				qq.sum1 -= ( ll )( ( ll )BIT[ l ].bits[ i ][ 0 ] * ( ll )qq.bits[ i ][ 1 ] + 
				( ll )BIT[ l ].bits[ i ][ 1 ] * ( ll )qq.bits[ i ][ 0 ] + 
				( ll )qq.bits[ i ][ 1 ] * ( ll )BIT[ l ].bits[ i ][ 1 ] ) * ( ll )( 1 << i );
			}
			if( t == 2 ) {
				qq.sum2 -= ( ll )qq.bits[ i ][ 1 ] * ( ll )BIT[ l ].bits[ i ][ 1 ] * ( ll )( 1 << i );
			}
		}
		l -= ( l & -l );
	}
	if( t == 0 ) return qq.sum0;
	else if( t == 1 ) return qq.sum1;
	else return qq.sum2;
}

inline int ReadInt() {
    int n = 0;
    char c = getchar_unlocked();
    while ( !( '0' <= c && c <= '9' ) ) {
        c = getchar_unlocked();
    }
    while ( '0' <= c && c <= '9' ) {
        n = n * 10 + c - '0';
        c = getchar_unlocked();
    }
    return n;
}

int main( void )
{
	freopen("test.in","rt",stdin);
	freopen("test.out","wt",stdout);
	int u;
	N = ReadInt();
	Q = ReadInt();
	for( int i = 1; i <= N; ++i ) {
		u = ReadInt();
		update( i, u, 0 );
	}
	for( int i = 0; i < Q; ++i ) {
		int comp, t, l, r, v, cnt = 0;
		char s[ 10 ];
		t = ReadInt();
		if( t == 1 ) {
			v = ReadInt();
			l = ReadInt();
			update( l, v, 1 );
		} else {
			while( ( s[ cnt++ ] = getchar_unlocked() ) != 0x20 );
			cnt--;
			s[ cnt ] = '\0';	
			l = ReadInt();
			r = ReadInt();
			comp = strcmp( s, "OR" );
			if( comp > 0) printf("%lld\n", query( l, r, 0 ) );
			else if( !comp ) printf("%lld\n", query( l, r, 1 ) );
			else printf("%lld\n", query( l, r, 2 ) );
		}
	}
	return 0;
}
