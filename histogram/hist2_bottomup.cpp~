#include <cstdio>
#include <algorithm>
#include <cstring>

#define MAXN 16

using namespace std;

typedef long long ll;

int readint() {
    int n = 0;
    char c = getchar_unlocked();
    while ( !( '0' <= c && c <= '9' ) ) {
        c = getchar_unlocked();
    }
    while ( '0' <= c && c <= '9' ) {
        n = n * 10 + c - '0';
        c = getchar_unlocked();
    }
    return n;
}

int dp[ 1 << ( MAXN + 1 ) ][ MAXN + 1 ], A[ MAXN + 1 ], N, ans = 0;
ll dp_count[ 1 << ( MAXN + 1 ) ][ MAXN + 1 ], cnt_ans = 0;

int main( void )
{
	do {
		ans = 0;
		cnt_ans = 0;
		memset( dp, 0, sizeof( dp ) );
		memset( dp_count, ( ll )0, sizeof( dp_count ) );
		memset( A, 0, sizeof( A ) );
		N = readint();
		if( N == 0 ) break;
		for( int i = 0; i < N; i++ ) {
			A[ i ] = readint();
			dp[ 1 << i ][ i ] = 2*A[ i ] + 2;
			dp_count[ 1 << i ][ i ] = 1;
		}
		for( int bitmask = 1; bitmask < ( 1 << N ); bitmask++ ) {
			if( bitmask & ( bitmask - 1 ) == 0 ) continue;
			for( int i = 0; i < N; i++ ) {
				if( !( bitmask & ( 1 << i ) ) ) continue;
				for( int j = 0; j < N; j++  ) {
					if( !( bitmask & ( 1 << j ) ) || i == j ) continue;
					int val = 2 + A[ i ];
					if( A[ i ] >= A[ j ] ) {
						val = val + A[ i ] - 2*A[ j ];
					} else {
						val = val - A[ i ];
					}
					dp[ bitmask ][ i ] = max( dp[ bitmask ][ i ], dp[ bitmask ^ ( 1 << i ) ][ j ] + val );
				}
				for( int j = 0; j < N; j++  ) {
					if( !( bitmask & ( 1 << j ) ) || i == j ) continue;
					int val = 2 + A[ i ];
					if( A[ i ] >= A[ j ] ) {
						val = val + A[ i ] - 2*A[ j ];
					} else {
						val = val - A[ i ];
					}
					if( dp[ bitmask ^ ( 1 << i ) ][ j ] + val == dp[ bitmask ][ i ] ) {
						dp_count[ bitmask ][ i ] += ( ll )dp_count[ bitmask ^ ( 1 << i ) ][ j ];
					}
				}
				if( !dp_count[ bitmask ][ i ] ) {
					dp_count[ bitmask ][ i ] = ( ll )1;
				}
				//printf("count of -> %d, with last -> %d is %d\n", bitmask, i, dp_count[ bitmask ][ i ] );
			}
		}
		for( int i = 0; i < N; i++ ) {
			ans = max( ans, dp[ ( 1 << N ) - 1 ][ i ] );
		}
		for( int i = 0; i < N; i++ ) {
			if( dp[ ( 1 << N ) - 1 ][ i ] == ans ) {
				//printf("dp_count -> %d\n", dp_count[ ( 1 << N ) - 1 ][ i ] );
				cnt_ans += dp_count[ ( 1 << N ) - 1 ][ i ];
			}
		}
		printf("%d %lld\n", ans, cnt_ans );
	} while( true );
	return 0;
}
