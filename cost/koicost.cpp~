#include <cstdio>
#include <algorithm>

#define MAXN 100100
#define MOD 1e9

using namespace std;

struct edge {
	int u,v,w;
};

long long cnt[ MAXN + 1 ], S[ MAXN + 1 ];
int p[ MAXN + 1 ];
unsigned long long ans = 0;

void makenode( int u )
{
	p[ u ] = u;
	cnt[ u ] = 1;
	S[ u ] = 0;
}

int find( int u )
{
	if( p[ u ] == u ) {
		return u;
	} else {
		return p[ u ] = find( p[ u ] );
	}
}

void Union( int u, int v, int i )
{
	u = find( u );
	v = find( v );
	p[ u ] = v;
	ans += S[ i ]*cnt[ v ]*cnt[ u ];
	ans = ans % (int)MOD;
	cnt[ v ] += cnt[ u ];
}

bool cmp( edge a, edge b )
{
	return a.w > b.w;
}

int main( void )
{
	int N,M;
	scanf("%d%d", &N, &M );
	edge E[ M + 1 ];
	for( int i = 1; i <= N; i++ ) {
		makenode( i );
	}
	for( int i = 1; i <= M; i++ ) {
		scanf("%d%d%d", &E[ i ].u, &E[ i ].v, &E[ i ].w );
	}
	sort( E + 1, E + M + 1, cmp );
	S[ M + 1 ] = 0;
	for( int i = M; i > 0; i-- ) {
		S[ i ] = S[ i + 1 ] + E[ i ].w;
	}
	for( int i = 1; i <= M; i++ ) {
		int fu = find( E[ i ].u ), fv = find( E[ i ].v );
		if( fu != fv ) {
			Union( E[ i ].u, E[ i ].v, i );
		}
	}
	printf("%llu\n", ans );
	return 0;
}
