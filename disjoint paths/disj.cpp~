#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <iostream>
#include <sstream>
#include <cassert>
 
using namespace std;
 
int p[ 20010 ];
 
bool bfs( vector< int > graph[], vector< vector< int > > flow, vector< vector< int > > cap, int N, int s, int t )
{
	bool visited[ N + 1 ];
	for( int i = 0; i <= N; i++ ) {
		p[ i ] = -1;
		visited[ i ] = false;
	}
	queue< int > q;
	q.push( s );
	while( !q.empty() ) {
		int u = q.front();
		q.pop();
		visited[ u ] = true;
		for( int i = 0; i < graph[ u ].size(); i++ ) {
			int v = graph[ u ][ i ];
			if( !visited[ v ] && cap[ u ][ v ] > flow[ u ][ v ] ) {
				q.push( v );
				p[ v ] = u;
			}
		}
	}
	return visited[ t ];
}
 
int edmonds_karp( vector< int > graph[], vector< vector< int > > &flow, vector< vector< int > > &cap,  int N, int s,int t, int K )
{
	int ans = 0;
	while( bfs( graph, flow, cap, N, s, t ) && ans < K ) {
		for( int i = t; p[ i ] != -1; i = p[ i ] ) {
			flow[ p[ i ] ][ i ]++;
			flow[ i ][ p[ i ] ]--;
		}
		ans++;
	}
	return ans;
}
 
int main( void )
{
	int cnt = 1;
	do {
		int N,K;
		{
			string line;
    			getline(cin, line);
    			istringstream ss(line);
   			ss >> K >> N;
		}
		assert(!!cin);
		if( !K && !N ) {
			break;
		}
		vector< vector< int > > flow( 2*N + 2, vector< int > ( 2*N + 2, 0 ) );
		vector< vector< int > > cap( flow );
		for( int i = 0; i <= 2*N + 1; i++ ) {
			p[ i ] = 0;
		}
		int mysize = 2*N + 2;
		vector< int > graph[ mysize + 1 ];
		for( int i = 0; i < N; i++ ) {
			graph[ 2*i ].push_back( 2*i + 1 );
			cap[ 2*i ][ 2*i + 1] = 1;
			string line;
			getline(cin, line);
     			istringstream ss(line);
     			while(true) {
	  			int j;
	  			ss >> j;
	  			if (!ss)
	   			 break;
	  			j--;
				graph[ 2*i + 1 ].push_back( 2*j );
				cap[ 2*i + 1 ][ 2*j ] = 1;
			}
		}
		printf("Case %d:\n",cnt++);
		int k = edmonds_karp( graph, flow, cap, mysize - 1, 1, 2, K );
		if( k == K ) {
			int pos;
			for( int i = 0; i < 2*N + 1; i++ ) {
				if( flow[ 1 ][ i ] == 1 ) {
					printf("1 %d",i / 2 + 1 );
					pos = i;
					while( pos != 2 ) {
						for( int j = 0; j < 2*N + 1; j++ ) {
							if( flow[ pos ][ j ] == 1 ) {
								pos = j;
								if( j % 2 == 0 ) {
									printf(" %d", j / 2 + 1 );
								}
								break;
							}
						}
					}
					printf("\n");
				}
			}
		}  else {
			printf("Impossible\n");
		}
		puts("");
	} while( true );
	return 0;
}
